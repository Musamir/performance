// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package encoding_decoding

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson770acdd0DecodePerformanceEncodingDecoding(in *jlexer.Lexer, out *Example) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "a":
			out.A = int32(in.Int32())
		case "b":
			out.B = string(in.String())
		case "c":
			if in.IsNull() {
				in.Skip()
				out.C = nil
			} else {
				in.Delim('[')
				if out.C == nil {
					if !in.IsDelim(']') {
						out.C = make([]int32, 0, 16)
					} else {
						out.C = []int32{}
					}
				} else {
					out.C = (out.C)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int32
					v1 = int32(in.Int32())
					out.C = append(out.C, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "d":
			if in.IsNull() {
				in.Skip()
				out.D = nil
			} else {
				in.Delim('[')
				if out.D == nil {
					if !in.IsDelim(']') {
						out.D = make([]string, 0, 4)
					} else {
						out.D = []string{}
					}
				} else {
					out.D = (out.D)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.D = append(out.D, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson770acdd0EncodePerformanceEncodingDecoding(out *jwriter.Writer, in Example) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.A))
	}
	{
		const prefix string = ",\"b\":"
		out.RawString(prefix)
		out.String(string(in.B))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		if in.C == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.C {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"d\":"
		out.RawString(prefix)
		if in.D == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.D {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Example) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson770acdd0EncodePerformanceEncodingDecoding(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Example) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson770acdd0DecodePerformanceEncodingDecoding(l, v)
}
